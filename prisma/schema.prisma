generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RedditPost {
  id        String   @id
  title     String
  subreddit String
  url       String
  upvotes   Int
  comments  Int
  createdAt DateTime
  author    String
  updatedAt DateTime @updatedAt
}

model GitHubRepo {
  id        Int      @id
  name      String
  fullName  String   @unique
  url       String
  stars     Int
  forks     Int
  watchers  Int
  pushedAt  DateTime
  language  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GitHubIssue {
  id        String   @id
  repoName  String
  issueUrl  String   @unique
  title     String
  author    String
  comments  Int
  createdAt DateTime
  updatedAt DateTime
}

model GitHubLanguageStat {
  id        Int    @id @default(autoincrement())
  language  String @unique
  repoCount Int
}

model StackOverflowQuestion {
  id           Int      @id
  title        String
  link         String
  viewCount    Int
  answerCount  Int
  score        Int
  tags         String[]
  isAnswered   Boolean
  creationDate DateTime
}

model StackOverflowAnswer {
  id           Int      @id
  questionId   Int
  link         String
  score        Int
  isAccepted   Boolean
  creationDate DateTime
}

model StackOverflowTagStat {
  id              Int    @id @default(autoincrement())
  tag             String @unique
  questionCount   Int
  unansweredCount Int
}

model HackerNewsItem {
  id        Int      @id
  title     String
  url       String?
  author    String?
  score     Int
  comments  Int
  createdAt DateTime
  updatedAt DateTime @updatedAt
}

model TechNewsItem {
  id        String   @id
  title     String
  url       String
  source    String?
  summary   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SocialMediaPost {
  id           String   @id
  platform     String
  content      String
  author       String
  hashtags     String[]
  url          String
  score        Int?
  createdAt    DateTime
  aggregatedAt DateTime @default(now())
}

model Meme {
  id        String   @id
  platform  String
  title     String?
  caption   String?
  imageUrl  String
  upvotes   Int?
  link      String
  createdAt DateTime
  updatedAt DateTime @updatedAt
}

model NewsletterSubscription {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String?
  subscribedAt DateTime @default(now())
  frequency    String?
  sources      String[]
  topics       String[]
}

model DataSummary {
  id        Int      @id @default(autoincrement())
  source    String   @unique
  subject   String?
  summary   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductHuntPost {
  id            Int      @id
  name          String
  tagline       String
  url           String
  votesCount    Int
  commentsCount Int
  createdAt     DateTime
  aggregatedAt  DateTime
  description   String?
  thumbnailUrl  String?
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  sessions      Session[]
  history       UserHistory[]
  preferences   UserPreferences?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPreferences {
  id           String   @id @default(cuid())
  userId       String   @unique
  interests    String[]
  sources      String[]
  contentTypes String[]
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserHistory {
  id        String   @id @default(cuid())
  userId    String
  contentId String
  action    String
  createdAt DateTime @default(now())
  content   Content  @relation(fields: [contentId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Content {
  id          String        @id @default(cuid())
  type        String
  title       String
  url         String
  summary     String?
  tags        String[]
  createdAt   DateTime      @default(now())
  score      Int?      // For aggregated engagement signals
  userHistory UserHistory[]
}
model SourceSummary {
  id        String   @id @default(cuid())
  source    String
  summary   String
  weekStart DateTime
  createdAt DateTime @default(now())

  @@unique([source, weekStart]) // Composite unique index
}

model PersonalizedNewsletter {
  id        String   @id @default(cuid())
  email     String
  content   String
  weekStart DateTime
  createdAt DateTime @default(now())

  @@unique([email, weekStart]) // Composite unique index
}
